{
  "openapi": "3.0.0",
  "info": {
    "title": "Smart Parking System API",
    "version": "1.0.0",
    "description": "\n# Smart Parking System API\n\n🎉 **Production-Ready Smart Parking Management System with IoT Integration**\n\n## System Overview\nComplete parking management solution with real-time IoT monitoring, subscription-based access control, and comprehensive payment integration.\n\n### Key Features:\n- 🏗️ **Hierarchical Data Management**: User → ParkingLot → Floor → ParkingSlot ← Node (IoT Sensor)\n- 🔐 **Role-based Access Control**: Super Admin, Admin, and User roles with subscription-based limits\n- 📊 **Flexible Subscription Plans**: Node-based pricing with Basic, Professional, and Enterprise tiers\n- 🌐 **LoRa IoT Integration**: Real-time parking status via ChirpStack MQTT\n- 💳 **Payment Gateway**: Cashfree integration with support for web and mobile apps\n- 📈 **Analytics & Monitoring**: Historical data, real-time status, and health checks\n\n### Test Data Available:\nTest data is pre-seeded for immediate testing. Use `npm run seed:test-data` to reset.\n\n**Test Credentials:**\n- Super Admin: `superadmin@test.com` / `Test@1234`\n- Admin (Professional Plan): `admin@test.com` / `Test@1234`\n- User (Basic Plan): `user@test.com` / `Test@1234`\n- Unverified User: `unverified@test.com` / `Test@1234`\n\n### Subscription Plans:\n- **Basic**: $19.99/mo + $2/node (₹1,659 + ₹166/node)\n  - 2 lots, 50 slots, 2 gateways, Email support\n- **Professional** ⭐: $49.99/mo + $2/node (₹4,149 + ₹166/node)\n  - 5 lots, 200 slots, 5 gateways, Analytics, API access, Priority support\n- **Enterprise**: $149.99/mo + $1.50/node (₹12,449 + ₹124.50/node)\n  - Unlimited resources, 24/7 premium support, Custom features\n\n### Architecture:\n**Data Flow**: ChirpStack → MQTT (HiveMQ) → Node → ParkingSlot → Real-time Status\n**Hierarchy**: Nodes connect directly to parking slots; gateway info from MQTT metadata\n**MQTT Integration**: Dynamic topic subscription based on Application IDs stored in ParkingLot table\n**Real-time Updates**: Status changes propagate immediately (<1s) from sensor to database\n\n### Endpoint Categories:\n- **Authentication**: Login, registration, OTP verification, password reset\n- **Parking Management**: Lots, floors, slots with full CRUD operations\n- **IoT Devices**: Gateway and node management with LoRa integration\n- **Subscriptions**: Plan management, subscription status, payment processing\n- **Analytics**: Status logs, historical data, real-time monitoring\n- **System**: Health checks, API documentation\n\n**Complete API documentation with examples and test data. All endpoints require JWT authentication unless specified.**\n      ",
    "contact": {
      "name": "API Support",
      "email": "support@smartparking.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://smart-parking-backend-production-5449.up.railway.app",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3001",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "email": {
            "type": "string",
            "example": "admin@test.com"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "role": {
            "type": "string",
            "enum": [
              "super_admin",
              "admin",
              "user"
            ],
            "example": "admin"
          },
          "isVerified": {
            "type": "boolean",
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "phone": {
            "type": "string",
            "example": "+911234567890",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "example": "Smart Parking Co",
            "nullable": true
          },
          "gstNumber": {
            "type": "string",
            "example": "29ABCDE1234F1Z5",
            "nullable": true
          },
          "address": {
            "type": "string",
            "example": "123 Main Street",
            "nullable": true
          },
          "city": {
            "type": "string",
            "example": "Mumbai",
            "nullable": true
          },
          "state": {
            "type": "string",
            "example": "Maharashtra",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "example": "400001",
            "nullable": true
          },
          "country": {
            "type": "string",
            "example": "India",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ParkingLot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "name": {
            "type": "string",
            "example": "Main Parking Garage"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, City"
          },
          "latitude": {
            "type": "number",
            "format": "decimal",
            "example": 40.7128
          },
          "longitude": {
            "type": "number",
            "format": "decimal",
            "example": -74.006
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "chirpstackApplicationId": {
            "type": "string",
            "format": "uuid",
            "example": "031709f4-457f-4e1c-a446-b9780838d050",
            "description": "ChirpStack Application ID for MQTT topic subscription",
            "nullable": true
          },
          "chirpstackApplicationName": {
            "type": "string",
            "example": "Test_App",
            "description": "ChirpStack Application Name",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Floor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "name": {
            "type": "string",
            "example": "Ground Floor"
          },
          "level": {
            "type": "integer",
            "example": 0,
            "nullable": true
          },
          "parkingLot": {
            "$ref": "#/components/schemas/ParkingLot"
          },
          "parkingSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingSlot"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ParkingSlot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "name": {
            "type": "string",
            "example": "A-001"
          },
          "isReservable": {
            "type": "boolean",
            "example": false
          },
          "floor": {
            "$ref": "#/components/schemas/Floor"
          },
          "node": {
            "$ref": "#/components/schemas/Node"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "name": {
            "type": "string",
            "example": "Parking Sensor A-001"
          },
          "chirpstackDeviceId": {
            "type": "string",
            "example": "0123456789ABCDEF",
            "description": "16-character hexadecimal ChirpStack device ID"
          },
          "description": {
            "type": "string",
            "example": "Ultrasonic sensor for parking slot A-001"
          },
          "latitude": {
            "type": "number",
            "format": "decimal",
            "example": 40.7128
          },
          "longitude": {
            "type": "number",
            "format": "decimal",
            "example": -74.006
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "online",
              "offline",
              "inactive"
            ],
            "example": "online"
          },
          "isOnline": {
            "type": "boolean",
            "example": true
          },
          "batteryLevel": {
            "type": "number",
            "example": 85.5,
            "description": "Battery level percentage (0-100)"
          },
          "distance": {
            "type": "number",
            "example": 15.5,
            "description": "Distance reading from sensor in cm"
          },
          "percentage": {
            "type": "number",
            "example": 82,
            "description": "Occupancy percentage (80-100% = available, <60% = occupied)"
          },
          "slotStatus": {
            "type": "string",
            "enum": [
              "available",
              "occupied",
              "unknown"
            ],
            "example": "available"
          },
          "parkingSlot": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "A-001"
              },
              "floor": {
                "type": "string",
                "example": "Ground Floor"
              },
              "parkingLot": {
                "type": "string",
                "example": "Main Parking Garage"
              }
            }
          },
          "gateway": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Gateway ID from ChirpStack metadata"
              },
              "name": {
                "type": "string",
                "example": "ChirpStack Gateway"
              }
            },
            "description": "Gateway information from ChirpStack data, not direct relationship"
          },
          "metadata": {
            "type": "object",
            "description": "Sensor data and ChirpStack information",
            "properties": {
              "signalQuality": {
                "type": "string",
                "enum": [
                  "excellent",
                  "good",
                  "fair",
                  "poor"
                ]
              },
              "rssi": {
                "type": "number",
                "example": -75
              },
              "snr": {
                "type": "number",
                "example": 8.5
              },
              "gatewayId": {
                "type": "string",
                "description": "ChirpStack gateway ID"
              },
              "lastChirpStackUpdate": {
                "type": "string",
                "format": "date-time"
              },
              "state": {
                "type": "string",
                "enum": [
                  "FREE",
                  "OCCUPIED"
                ],
                "description": "ChirpStack sensor state"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NodeCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "chirpstackDeviceId",
          "parkingSlotId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Parking Sensor A-001",
            "description": "Name of the node"
          },
          "chirpstackDeviceId": {
            "type": "string",
            "example": "0123456789ABCDEF",
            "pattern": "^[0-9a-fA-F]{16}$",
            "description": "16-character hexadecimal ChirpStack device ID (unique identifier)"
          },
          "description": {
            "type": "string",
            "example": "Ultrasonic sensor for parking slot A-001",
            "description": "Optional description of the node"
          },
          "parkingSlotId": {
            "type": "string",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
            "description": "UUID of the parking slot this node will monitor"
          },
          "latitude": {
            "type": "number",
            "format": "decimal",
            "example": 40.7128,
            "description": "GPS latitude coordinate"
          },
          "longitude": {
            "type": "number",
            "format": "decimal",
            "example": -74.006,
            "description": "GPS longitude coordinate"
          }
        }
      },
      "NodeUpdateStatusRequest": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number",
            "minimum": 0,
            "example": 15.5,
            "description": "Distance reading from sensor in cm"
          },
          "percentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "example": 82,
            "description": "Occupancy percentage (80-100% = available, <60% = occupied)"
          },
          "batteryLevel": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "example": 92,
            "description": "Battery level percentage"
          }
        },
        "minProperties": 1,
        "description": "At least one status field must be provided"
      },
      "SubscriptionPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the subscription plan"
          },
          "name": {
            "type": "string",
            "example": "Professional Plan",
            "description": "Name of the subscription plan"
          },
          "description": {
            "type": "string",
            "example": "Perfect for medium-sized parking operations",
            "description": "Detailed description of the plan"
          },
          "basePricePerMonth": {
            "type": "number",
            "format": "decimal",
            "example": 49.99
          },
          "basePricePerYear": {
            "type": "number",
            "format": "decimal",
            "example": 499.99
          },
          "basePricePerQuarter": {
            "type": "number",
            "format": "decimal",
            "example": 139.99,
            "nullable": true
          },
          "pricePerNodePerMonth": {
            "type": "number",
            "format": "decimal",
            "example": 2
          },
          "pricePerNodePerYear": {
            "type": "number",
            "format": "decimal",
            "example": 20
          },
          "pricePerNodePerQuarter": {
            "type": "number",
            "format": "decimal",
            "example": 5.5,
            "nullable": true
          },
          "usdToInrRate": {
            "type": "number",
            "format": "decimal",
            "example": 83
          },
          "defaultBillingCycle": {
            "type": "string",
            "enum": [
              "monthly",
              "yearly",
              "quarterly"
            ],
            "example": "monthly"
          },
          "maxGateways": {
            "type": "integer",
            "example": 5
          },
          "maxParkingLots": {
            "type": "integer",
            "example": 5
          },
          "maxFloors": {
            "type": "integer",
            "example": 10
          },
          "maxParkingSlots": {
            "type": "integer",
            "example": 200
          },
          "maxUsers": {
            "type": "integer",
            "example": 5
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Advanced analytics",
              "Priority support",
              "API access"
            ],
            "description": "List of features included in the plan"
          },
          "includesAnalytics": {
            "type": "boolean",
            "example": true
          },
          "includesSupport": {
            "type": "boolean",
            "example": true
          },
          "includesAPI": {
            "type": "boolean",
            "example": true
          },
          "includesCustomization": {
            "type": "boolean",
            "example": false
          },
          "sortOrder": {
            "type": "integer",
            "example": 2
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "isPopular": {
            "type": "boolean",
            "example": true
          },
          "isCustom": {
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "pricing": {
            "type": "object",
            "properties": {
              "monthly": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "number",
                    "description": "Base monthly price in USD"
                  },
                  "perNode": {
                    "type": "number",
                    "description": "Price per node per month in USD"
                  },
                  "formatted": {
                    "type": "object",
                    "properties": {
                      "usd": {
                        "type": "string",
                        "example": "$49.99"
                      },
                      "inr": {
                        "type": "string",
                        "example": "₹3,749.25"
                      }
                    }
                  }
                }
              },
              "yearly": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "number",
                    "description": "Base yearly price in USD"
                  },
                  "perNode": {
                    "type": "number",
                    "description": "Price per node per year in USD"
                  },
                  "discount": {
                    "type": "number",
                    "description": "Discount percentage for yearly billing"
                  },
                  "formatted": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "limits": {
            "type": "object",
            "properties": {
              "maxGateways": {
                "type": "integer",
                "description": "Maximum number of gateways allowed"
              },
              "maxParkingLots": {
                "type": "integer",
                "description": "Maximum number of parking lots allowed"
              },
              "maxFloors": {
                "type": "integer",
                "description": "Maximum number of floors allowed"
              },
              "maxParkingSlots": {
                "type": "integer",
                "description": "Maximum number of parking slots allowed"
              },
              "maxUsers": {
                "type": "integer",
                "description": "Maximum number of users allowed"
              }
            }
          },
          "includes": {
            "type": "object",
            "properties": {
              "analytics": {
                "type": "boolean"
              },
              "support": {
                "type": "boolean"
              },
              "api": {
                "type": "boolean"
              },
              "customization": {
                "type": "boolean"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "isActive": {
                "type": "boolean"
              },
              "isPopular": {
                "type": "boolean"
              },
              "isCustom": {
                "type": "boolean"
              },
              "defaultBillingCycle": {
                "type": "string",
                "enum": [
                  "monthly",
                  "yearly",
                  "quarterly"
                ]
              }
            }
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "admin": {
            "$ref": "#/components/schemas/User"
          },
          "plan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "billingCycle": {
            "type": "string",
            "enum": [
              "monthly",
              "yearly",
              "quarterly"
            ],
            "example": "monthly"
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "example": 55.99
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "trialEndDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "nextBillingDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "active",
              "expired",
              "cancelled",
              "suspended",
              "trial"
            ],
            "example": "active"
          },
          "paymentStatus": {
            "type": "string",
            "enum": [
              "pending",
              "paid",
              "failed",
              "refunded",
              "cancelled"
            ],
            "example": "paid"
          },
          "gatewayLimit": {
            "type": "integer",
            "example": 5
          },
          "parkingLotLimit": {
            "type": "integer",
            "example": 5
          },
          "floorLimit": {
            "type": "integer",
            "example": 10
          },
          "parkingSlotLimit": {
            "type": "integer",
            "example": 200
          },
          "userLimit": {
            "type": "integer",
            "example": 5
          },
          "autoRenew": {
            "type": "boolean",
            "example": true
          },
          "cancellationReason": {
            "type": "string",
            "nullable": true
          },
          "cancelledAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "transactionId": {
            "type": "string",
            "example": "TEST_TXN_001"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "type": {
            "type": "string",
            "enum": [
              "subscription",
              "subscription_upgrade",
              "one_time",
              "refund",
              "credit"
            ],
            "example": "subscription"
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "example": 4149.17
          },
          "currency": {
            "type": "string",
            "example": "INR"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "cancelled",
              "refunded"
            ],
            "example": "completed"
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "stripe",
              "paypal",
              "razorpay",
              "manual",
              "bank_transfer",
              "cashfree"
            ],
            "example": "cashfree"
          },
          "paymentMethodDetails": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "example": "Professional Plan - Monthly (3 nodes)"
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "refundedAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "refundAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "nullable": true
          },
          "receiptUrl": {
            "type": "string",
            "nullable": true
          },
          "invoiceUrl": {
            "type": "string",
            "nullable": true
          },
          "isTest": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Gateway": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "chirpstackGatewayId": {
            "type": "string",
            "example": "GW-001"
          },
          "name": {
            "type": "string",
            "example": "Gateway 1 - Downtown"
          },
          "description": {
            "type": "string",
            "example": "LoRa Gateway - Ground Floor",
            "nullable": true
          },
          "location": {
            "type": "string",
            "example": "Ground Floor Entrance",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "decimal",
            "example": 18.9258,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "decimal",
            "example": 72.822,
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "isLinked": {
            "type": "boolean",
            "example": true
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "linkedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "parkingLot": {
            "$ref": "#/components/schemas/ParkingLot"
          },
          "linkedAdmin": {
            "$ref": "#/components/schemas/User"
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ParkingStatusLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parkingSlot": {
            "$ref": "#/components/schemas/ParkingSlot"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "occupied",
              "unknown",
              "reserved"
            ],
            "example": "available"
          },
          "detectedAt": {
            "type": "string",
            "format": "date-time"
          },
          "distance": {
            "type": "number",
            "format": "decimal",
            "example": 150.25,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "format": "decimal",
            "example": 85.5,
            "nullable": true
          },
          "batteryLevel": {
            "type": "integer",
            "example": 92,
            "nullable": true
          },
          "signalQuality": {
            "type": "string",
            "enum": [
              "excellent",
              "good",
              "fair",
              "poor"
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubscriptionStatus": {
        "type": "object",
        "properties": {
          "hasActiveSubscription": {
            "type": "boolean",
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "NO_SUBSCRIPTION"
            ],
            "example": "ACTIVE"
          },
          "subscription": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "planName": {
                "type": "string",
                "example": "Professional"
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "daysRemaining": {
                "type": "integer",
                "example": 25
              },
              "autoRenew": {
                "type": "boolean",
                "example": true
              },
              "limits": {
                "type": "object",
                "properties": {
                  "gateways": {
                    "type": "integer",
                    "example": 10
                  },
                  "parkingLots": {
                    "type": "integer",
                    "example": 5
                  },
                  "floors": {
                    "type": "integer",
                    "example": 25
                  },
                  "parkingSlots": {
                    "type": "integer",
                    "example": 500
                  },
                  "users": {
                    "type": "integer",
                    "example": 10
                  }
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error description"
          },
          "error": {
            "type": "string",
            "example": "Detailed error message"
          }
        }
      },
      "CreateSubscriptionPlan": {
        "type": "object",
        "required": [
          "name",
          "basePricePerMonth",
          "basePricePerYear"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "example": "Professional Plan"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "example": "Perfect for medium-sized parking operations"
          },
          "basePricePerMonth": {
            "type": "number",
            "minimum": 0,
            "example": 49.99
          },
          "basePricePerYear": {
            "type": "number",
            "minimum": 0,
            "example": 499.9
          },
          "basePricePerQuarter": {
            "type": "number",
            "minimum": 0,
            "example": 134.97
          },
          "pricePerNodePerMonth": {
            "type": "number",
            "minimum": 0,
            "default": 2
          },
          "pricePerNodePerYear": {
            "type": "number",
            "minimum": 0,
            "default": 20
          },
          "maxGateways": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "maxParkingLots": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "maxFloors": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "maxParkingSlots": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "maxUsers": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Real-time monitoring",
              "Mobile app access",
              "Email support"
            ]
          },
          "includesAnalytics": {
            "type": "boolean",
            "default": false
          },
          "includesSupport": {
            "type": "boolean",
            "default": false
          },
          "includesAPI": {
            "type": "boolean",
            "default": false
          },
          "includesCustomization": {
            "type": "boolean",
            "default": false
          },
          "defaultBillingCycle": {
            "type": "string",
            "enum": [
              "monthly",
              "yearly",
              "quarterly"
            ],
            "default": "monthly"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "isPopular": {
            "type": "boolean",
            "default": false
          },
          "sortOrder": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Unauthorized",
              "error": "Invalid or missing token"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Validation failed",
              "error": "Email must be a valid email address"
            }
          }
        }
      },
      "SubscriptionLimitExceeded": {
        "description": "Subscription feature limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Parking Lot limit reached. Current: 1/1"
                },
                "code": {
                  "type": "string",
                  "example": "FEATURE_LIMIT_EXCEEDED"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "feature": {
                      "type": "string",
                      "example": "parkingLots"
                    },
                    "current": {
                      "type": "integer",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "example": 1
                    },
                    "planName": {
                      "type": "string",
                      "example": "Starter"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SuccessResponse": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Operation completed successfully"
                },
                "data": {
                  "type": "object"
                },
                "count": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "summary": "Create a new user account",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "example": "password123"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "example": "Doe"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "admin"
                    ],
                    "default": "user",
                    "example": "user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User created successfully. OTP sent for verification."
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login to existing account",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Email not verified"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/verify-otp": {
      "post": {
        "summary": "Verify OTP for email verification",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "otp"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "pattern": "^[0-9]{6}$",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully"
          },
          "400": {
            "description": "Invalid OTP or already verified"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "summary": "Request password reset OTP",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully"
          },
          "429": {
            "description": "Too many requests - please wait"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "summary": "Reset password using OTP",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "otp",
                  "newPassword"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "pattern": "^[0-9]{6}$",
                    "example": "123456"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "example": "newpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Invalid OTP or password"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/resend-otp": {
      "post": {
        "summary": "Resend OTP for verification or password reset",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "purpose": {
                    "type": "string",
                    "enum": [
                      "verification",
                      "password_reset"
                    ],
                    "default": "verification",
                    "example": "verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Too many requests - please wait"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/otp-config": {
      "get": {
        "summary": "Get OTP configuration (Admin only)",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OTP configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "length": {
                          "type": "number",
                          "example": 6
                        },
                        "expiryMinutes": {
                          "type": "number",
                          "example": 15
                        },
                        "maxAttempts": {
                          "type": "number",
                          "example": 3
                        },
                        "resendCooldownMinutes": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "summary": "Get user profile with subscription status",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "subscription": {
                          "type": "object",
                          "properties": {
                            "hasActiveSubscription": {
                              "type": "boolean"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "ACTIVE",
                                "EXPIRED",
                                "NO_SUBSCRIPTION"
                              ]
                            },
                            "subscription": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update user profile details",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Admin"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "User"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+1 555 123 4567"
                  },
                  "companyName": {
                    "type": "string",
                    "example": "Smart Parking Inc."
                  },
                  "gstNumber": {
                    "type": "string",
                    "example": "27AAACI1126H1Z2"
                  },
                  "address": {
                    "type": "string",
                    "example": "221B Baker Street"
                  },
                  "city": {
                    "type": "string",
                    "example": "London"
                  },
                  "state": {
                    "type": "string",
                    "example": "Greater London"
                  },
                  "zipCode": {
                    "type": "string",
                    "example": "NW1 6XE"
                  },
                  "country": {
                    "type": "string",
                    "example": "United Kingdom"
                  },
                  "currentPassword": {
                    "type": "string",
                    "example": "Admin123!"
                  },
                  "newPassword": {
                    "type": "string",
                    "example": "NewPassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "subscription": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failure or incorrect current password"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "summary": "Refresh JWT token",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Token refreshed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/email-config": {
      "get": {
        "summary": "Get email service configuration (Admin only)",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email configuration retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/recover-account": {
      "post": {
        "summary": "Recover unverified account by regenerating OTP",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account recovered and new OTP sent"
          },
          "400": {
            "description": "Account not found or already verified"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/floors": {
      "get": {
        "summary": "Get all floors for current admin",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All floors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "All floors retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Floor"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "example": 5
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/floors/parking-lot/{parkingLotId}": {
      "get": {
        "summary": "Get all floors for a parking lot",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "parkingLotId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking lot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Floors retrieved successfully"
          },
          "404": {
            "description": "Parking lot not found"
          }
        }
      },
      "post": {
        "summary": "Create a new floor",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "parkingLotId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking lot ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Ground Floor"
                  },
                  "level": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Floor created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Parking lot not found"
          }
        }
      }
    },
    "/api/floors/{id}": {
      "get": {
        "summary": "Get floor by ID",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Floor retrieved successfully"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      },
      "put": {
        "summary": "Update floor",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "level": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Floor updated successfully"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      },
      "delete": {
        "summary": "Delete floor",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Floor deleted successfully"
          },
          "400": {
            "description": "Cannot delete floor with existing parking slots"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      }
    },
    "/api/floors/{id}/statistics": {
      "get": {
        "summary": "Get floor statistics",
        "tags": [
          "Floors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Floor statistics retrieved successfully"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      }
    },
    "/api/gateways/webhook/node-status": {
      "post": {
        "summary": "Update node status via ChirpStack webhook",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "deviceId"
                ],
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "example": "sensor_001"
                  },
                  "metadata": {
                    "type": "object",
                    "example": {
                      "batteryLevel": 85,
                      "rssi": -72
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node status updated successfully"
          },
          "404": {
            "description": "Node not found"
          }
        }
      }
    },
    "/api/gateways/webhook/gateway-status": {
      "post": {
        "summary": "Update gateway status via ChirpStack webhook",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "gatewayId"
                ],
                "properties": {
                  "gatewayId": {
                    "type": "string",
                    "example": "gw_001"
                  },
                  "metadata": {
                    "type": "object",
                    "example": {
                      "temperature": 42,
                      "uptime": 86400
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gateway status updated successfully"
          },
          "404": {
            "description": "Gateway not found"
          }
        }
      }
    },
    "/api/gateways/available": {
      "get": {
        "summary": "Get available gateways for linking (Admin only)",
        "tags": [
          "Gateways - Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Available gateways retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/gateways/my-gateways": {
      "get": {
        "summary": "Get admin's linked gateways (Admin only)",
        "tags": [
          "Gateways - Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Linked gateways retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/gateways/link": {
      "post": {
        "summary": "Link gateway to admin account (Admin only)",
        "tags": [
          "Gateways - Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "gatewayId"
                ],
                "properties": {
                  "gatewayId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gateway linked successfully"
          },
          "400": {
            "description": "Gateway already linked or invalid ID"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/gateways/nodes": {
      "post": {
        "summary": "Create node under gateway (Admin only)",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "gatewayId",
                  "chirpstackDeviceId",
                  "name"
                ],
                "properties": {
                  "gatewayId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  },
                  "chirpstackDeviceId": {
                    "type": "string",
                    "example": "sensor_001"
                  },
                  "name": {
                    "type": "string",
                    "example": "Parking Slot A1 Sensor"
                  },
                  "description": {
                    "type": "string",
                    "example": "Ultrasonic sensor for slot A1"
                  },
                  "latitude": {
                    "type": "number",
                    "example": 40.7128
                  },
                  "longitude": {
                    "type": "number",
                    "example": -74.006
                  },
                  "metadata": {
                    "type": "object",
                    "example": {
                      "sensorType": "ultrasonic",
                      "range": "4m"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Node created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/gateways/statistics": {
      "get": {
        "summary": "Get gateway and node statistics",
        "tags": [
          "Gateways"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "gatewayId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specific gateway ID to get statistics for"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/gateways": {
      "post": {
        "summary": "Create a new gateway (Super Admin only)",
        "tags": [
          "Gateways - Super Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "chirpstackGatewayId",
                  "name"
                ],
                "properties": {
                  "chirpstackGatewayId": {
                    "type": "string",
                    "example": "gw_001"
                  },
                  "name": {
                    "type": "string",
                    "example": "Main Building Gateway"
                  },
                  "description": {
                    "type": "string",
                    "example": "Primary gateway for main building parking"
                  },
                  "location": {
                    "type": "string",
                    "example": "Building A, Floor 1"
                  },
                  "latitude": {
                    "type": "number",
                    "example": 40.7128
                  },
                  "longitude": {
                    "type": "number",
                    "example": -74.006
                  },
                  "metadata": {
                    "type": "object",
                    "example": {
                      "model": "RAK7249",
                      "version": "1.0.3"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gateway created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Access denied"
          }
        }
      },
      "get": {
        "summary": "Get all gateways (Super Admin only)",
        "tags": [
          "Gateways - Super Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "includeInactive",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "false"
            },
            "description": "Include inactive gateways"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateways retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/gateways/{id}": {
      "get": {
        "summary": "Get gateway by ID with nodes (Super Admin only)",
        "tags": [
          "Gateways - Super Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Gateway ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gateway not found"
          }
        }
      },
      "put": {
        "summary": "Update gateway (Super Admin only)",
        "tags": [
          "Gateways - Super Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Gateway ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Gateway Name"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated description"
                  },
                  "location": {
                    "type": "string",
                    "example": "Building B, Floor 2"
                  },
                  "latitude": {
                    "type": "number",
                    "example": 40.7589
                  },
                  "longitude": {
                    "type": "number",
                    "example": -73.9851
                  },
                  "isActive": {
                    "type": "boolean",
                    "example": true
                  },
                  "metadata": {
                    "type": "object",
                    "example": {
                      "firmware": "2.1.0"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gateway updated successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gateway not found"
          }
        }
      },
      "delete": {
        "summary": "Delete gateway (Super Admin only)",
        "tags": [
          "Gateways - Super Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Gateway ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway deleted successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gateway not found"
          }
        }
      }
    },
    "/api/gateways/{id}/unlink": {
      "post": {
        "summary": "Unlink gateway from admin account (Admin only)",
        "tags": [
          "Gateways - Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Gateway ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway unlinked successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gateway not found or not linked to this admin"
          }
        }
      }
    },
    "/api/gateways/{id}/nodes": {
      "get": {
        "summary": "Get nodes for a gateway",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Gateway ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway nodes retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gateway not found"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Basic health check endpoint",
        "description": "Returns the basic health status of the API and its dependencies",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "degraded",
                        "unhealthy"
                      ]
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Uptime in milliseconds"
                    },
                    "version": {
                      "type": "string"
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "responseTime": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy"
          }
        }
      }
    },
    "/api/health/detailed": {
      "get": {
        "summary": "Detailed health check (Admin only)",
        "description": "Returns detailed health information including environment and configuration",
        "tags": [
          "Health"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed health information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "environment": {
                      "type": "object"
                    },
                    "configuration": {
                      "type": "object"
                    },
                    "dependencies": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/health/ready": {
      "get": {
        "summary": "Readiness probe for Kubernetes",
        "description": "Checks if the service is ready to serve traffic",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Service is ready",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ready": {
                      "type": "boolean"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not ready"
          }
        }
      }
    },
    "/api/health/live": {
      "get": {
        "summary": "Liveness probe for Kubernetes",
        "description": "Checks if the service is alive and should not be restarted",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Service is alive",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alive": {
                      "type": "boolean"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not alive"
          }
        }
      }
    },
    "/api/health/ping": {
      "get": {
        "summary": "Simple ping endpoint",
        "description": "Returns a simple pong response for basic connectivity testing",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Pong response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "pong"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/nodes": {
      "get": {
        "summary": "Get all nodes for the authenticated admin with pagination and filtering",
        "description": "Returns nodes owned by the current admin with their parking slot relationships, real-time status, pagination support, and optional filtering by slot ID",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page",
            "example": 20
          },
          {
            "in": "query",
            "name": "slotId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter nodes by specific parking slot ID",
            "example": "2e9f8379-cecc-468d-b290-51208d7faf04"
          }
        ],
        "responses": {
          "200": {
            "description": "List of nodes with status information and pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Nodes retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Node"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 50
                        },
                        "itemsPerPage": {
                          "type": "integer",
                          "example": 20
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPrevPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new node",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Node created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Node created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Node"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Parking slot not found"
          },
          "409": {
            "description": "ChirpStack Device ID already exists"
          }
        }
      }
    },
    "/api/nodes/{nodeId}": {
      "get": {
        "summary": "Get a specific node",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "UUID of the node to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Node details with current status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Node retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Node"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Node not found"
          }
        }
      },
      "put": {
        "summary": "Update a node",
        "description": "Update node information including name, description, ChirpStack Device ID, location, and parking slot assignment",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "UUID of the node to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Parking Sensor A-001",
                    "description": "Name of the node"
                  },
                  "chirpstackDeviceId": {
                    "type": "string",
                    "example": "0123456789ABCDEF",
                    "pattern": "^[0-9a-fA-F]{16}$",
                    "description": "16-character hexadecimal ChirpStack device ID"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated ultrasonic sensor for parking slot A-001",
                    "description": "Description of the node"
                  },
                  "parkingSlotId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "description": "UUID of the parking slot to assign this node to"
                  },
                  "latitude": {
                    "type": "number",
                    "format": "decimal",
                    "example": 40.7128,
                    "description": "GPS latitude coordinate"
                  },
                  "longitude": {
                    "type": "number",
                    "format": "decimal",
                    "example": -74.006,
                    "description": "GPS longitude coordinate"
                  }
                },
                "description": "All fields are optional. Only provided fields will be updated."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Node updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string"
                        },
                        "chirpstackDeviceId": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "latitude": {
                          "type": "number"
                        },
                        "longitude": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string"
                        },
                        "parkingSlot": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or ChirpStack Device ID already exists"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Node or parking slot not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a node",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "UUID of the node to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Node deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Node deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Node not found"
          }
        }
      }
    },
    "/api/nodes/{nodeId}/status": {
      "put": {
        "summary": "Update node status (Simple percentage-based logic)",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdateStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "nodeId": {
                          "type": "string"
                        },
                        "distance": {
                          "type": "number"
                        },
                        "percentage": {
                          "type": "number"
                        },
                        "batteryLevel": {
                          "type": "number"
                        },
                        "slotStatus": {
                          "type": "string",
                          "enum": [
                            "available",
                            "reserved",
                            null
                          ]
                        },
                        "lastSeen": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/nodes/unassigned": {
      "get": {
        "summary": "Get unassigned nodes",
        "description": "Get all nodes that are not assigned to any parking slot. Supports pagination and optional gateway filtering.",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of items per page",
            "example": 50
          },
          {
            "in": "query",
            "name": "gatewayId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by specific gateway ID",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          }
        ],
        "responses": {
          "200": {
            "description": "Unassigned nodes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "chirpstackDeviceId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "example": "unassigned"
                          },
                          "batteryLevel": {
                            "type": "number",
                            "nullable": true
                          },
                          "gatewayId": {
                            "type": "string",
                            "nullable": true
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "integer",
                      "example": 45
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/nodes/by-slots": {
      "post": {
        "summary": "Get nodes by parking slot IDs",
        "description": "Retrieve nodes associated with specific parking slot IDs. Useful for getting sensor data for multiple slots at once.",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "slotIds"
                ],
                "properties": {
                  "slotIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "example": [
                      "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                      "b2c3d4e5-f6g7-8901-bcde-f23456789012"
                    ],
                    "description": "Array of parking slot UUIDs to get nodes for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Nodes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Found 3 nodes for 5 parking slots"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Node"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "example": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - slotIds array required"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/parking/overview": {
      "get": {
        "summary": "Get comprehensive parking overview",
        "description": "Retrieve all parking lots, floors, slots, and nodes with real-time status for the authenticated admin",
        "tags": [
          "Parking Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Parking overview retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "parkingLots": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "statistics": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/parking/slots/{slotId}/details": {
      "get": {
        "summary": "Get detailed slot information",
        "description": "Retrieve detailed information about a specific parking slot including historical data",
        "tags": [
          "Parking Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slotId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Parking slot ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of historical records to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Slot details retrieved successfully"
          },
          "400": {
            "description": "Invalid slot ID"
          },
          "404": {
            "description": "Slot not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/parking/nodes/{nodeId}/update": {
      "put": {
        "summary": "Update node data manually",
        "description": "Manually update sensor node data for testing or maintenance purposes",
        "tags": [
          "Parking Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Node ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number",
                    "description": "Distance in centimeters"
                  },
                  "percentage": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Occupancy percentage"
                  },
                  "batteryLevel": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Battery level percentage"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "OCCUPIED"
                    ],
                    "description": "Sensor state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node data updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Node not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/parking/dashboard/stats": {
      "get": {
        "summary": "Get dashboard statistics",
        "description": "Retrieve real-time statistics for the parking management dashboard",
        "tags": [
          "Parking Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "statistics": {
                          "type": "object"
                        },
                        "recentActivity": {
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/parking/chirpstack/webhook": {
      "post": {
        "summary": "ChirpStack webhook endpoint",
        "description": "Receive ChirpStack uplink data via webhook (backup to MQTT)",
        "tags": [
          "Parking Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "ChirpStack uplink data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook data processed successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/parking-lots": {
      "get": {
        "summary": "Get all parking lots for the authenticated admin",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Parking lots retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ParkingLot"
                      }
                    },
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new parking lot",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "address"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Main Building Parking"
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Main Street, City"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking lot created successfully"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/parking-lots/{id}": {
      "get": {
        "summary": "Get parking lot by ID",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Parking lot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Parking lot retrieved successfully"
          },
          "404": {
            "description": "Parking lot not found"
          }
        }
      },
      "put": {
        "summary": "Update parking lot",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Parking lot ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parking lot updated successfully"
          },
          "404": {
            "description": "Parking lot not found"
          }
        }
      },
      "delete": {
        "summary": "Delete parking lot",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Parking lot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Parking lot deleted successfully"
          },
          "400": {
            "description": "Cannot delete parking lot with existing floors/gateways"
          },
          "404": {
            "description": "Parking lot not found"
          }
        }
      }
    },
    "/api/parking-lots/{id}/assign-gateway": {
      "post": {
        "summary": "Assign a gateway to a parking lot",
        "description": "Associates a LoRa gateway with a specific parking lot. The gateway must be owned by the requesting admin and not already assigned to another parking lot.",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "UUID of the parking lot to assign the gateway to",
            "example": "802fb473-b5cd-4f3d-afce-8fd6eb3976fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "gatewayId"
                ],
                "properties": {
                  "gatewayId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the gateway to assign to the parking lot",
                    "example": "83bf23cc-1944-402c-8563-a6df50d1d936"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gateway assigned to parking lot successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Gateway assigned to parking lot successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "parkingLot": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            },
                            "address": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "gateway": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "isOnline": {
                              "type": "boolean"
                            },
                            "lastSeen": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or gateway already assigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "validation_error": {
                          "value": "Gateway ID is required"
                        },
                        "already_assigned": {
                          "value": "Gateway is already assigned to another parking lot"
                        },
                        "invalid_uuid": {
                          "value": "Invalid UUID format for id parameter"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Parking lot or gateway not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "parking_lot_not_found": {
                          "value": "Parking lot not found or access denied"
                        },
                        "gateway_not_found": {
                          "value": "Gateway not found or not linked to your account"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to assign gateway to parking lot"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/parking-lots/{id}/unassign-gateway/{gatewayId}": {
      "post": {
        "summary": "Unassign gateway from parking lot",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Parking lot ID"
          },
          {
            "in": "path",
            "name": "gatewayId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Gateway ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway unassigned successfully"
          },
          "404": {
            "description": "Parking lot or gateway not found"
          }
        }
      }
    },
    "/api/parking-lots/{id}/gateways": {
      "get": {
        "summary": "Get all gateways assigned to a parking lot",
        "description": "Retrieves all gateways that are currently assigned to the specified parking lot. Only returns gateways owned by the authenticated admin.",
        "tags": [
          "Parking Lots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "UUID of the parking lot to get gateways for",
            "example": "ccb073eb-1fc2-486e-b03b-3d2b54b92454"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateways retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Found 2 gateways for parking lot"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "83bf23cc-1944-402c-8563-a6df50d1d936"
                          },
                          "name": {
                            "type": "string",
                            "example": "Main Gateway A1"
                          },
                          "chirpstackGatewayId": {
                            "type": "string",
                            "example": "gw_001"
                          },
                          "description": {
                            "type": "string",
                            "example": "Primary gateway for building A"
                          },
                          "location": {
                            "type": "string",
                            "example": "Building A, Floor 1"
                          },
                          "latitude": {
                            "type": "number",
                            "example": 40.7128
                          },
                          "longitude": {
                            "type": "number",
                            "example": -74.006
                          },
                          "isOnline": {
                            "type": "boolean",
                            "example": true
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          },
                          "lastSeen": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-09-23T07:30:00.000Z"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "model": "RAK7249",
                              "firmware": "1.2.3"
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "integer",
                      "example": 2
                    },
                    "parkingLot": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string",
                          "example": "Main Building Parking"
                        },
                        "address": {
                          "type": "string",
                          "example": "123 Main Street, City"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid UUID format for id parameter"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Parking lot not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Parking lot not found or access denied"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve gateways for parking lot"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/parking-slots": {
      "get": {
        "summary": "Get all parking slots for current admin",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All parking slots retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "All parking slots retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ParkingSlot"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/parking-slots/floor/{floorId}": {
      "get": {
        "summary": "Get all parking slots for a floor",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "floorId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slots retrieved successfully"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      },
      "post": {
        "summary": "Create a new parking slot",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "floorId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "A-001"
                  },
                  "isReservable": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking slot created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      }
    },
    "/api/parking-slots/{id}/realtime": {
      "get": {
        "summary": "Get realtime parking slot status from MQTT cache",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Parking slot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Realtime status retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      }
    },
    "/api/parking-slots/{id}/mqtt/simulate": {
      "post": {
        "summary": "Publish simulated MQTT payload for a parking slot",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Parking slot ID"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "applicationId": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "OCCUPIED"
                    ]
                  },
                  "distanceCm": {
                    "type": "number"
                  },
                  "gatewayId": {
                    "type": "string"
                  },
                  "topic": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Simulated payload published successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/parking-slots/{id}": {
      "get": {
        "summary": "Get parking slot by ID",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking slot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slot retrieved successfully"
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      },
      "put": {
        "summary": "Update parking slot",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking slot ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "isReservable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parking slot updated successfully"
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      },
      "delete": {
        "summary": "Delete parking slot",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking slot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slot deleted successfully"
          },
          "400": {
            "description": "Cannot delete parking slot with assigned node"
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      }
    },
    "/api/parking-slots/floor/{floorId}/bulk": {
      "post": {
        "summary": "Create multiple parking slots",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "floorId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Floor ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "slots"
                ],
                "properties": {
                  "slots": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "A-001"
                        },
                        "isReservable": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking slots created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Floor not found"
          }
        }
      }
    },
    "/api/parking-slots/{id}/assign-node": {
      "post": {
        "summary": "Assign node to parking slot",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking slot ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nodeId"
                ],
                "properties": {
                  "nodeId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node assigned successfully"
          },
          "404": {
            "description": "Parking slot or node not found"
          }
        }
      }
    },
    "/api/parking-slots/{id}/unassign-node": {
      "post": {
        "summary": "Unassign node from parking slot",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking slot ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Node unassigned successfully"
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      }
    },
    "/api/parking-slots/{id}/status": {
      "get": {
        "summary": "Get parking slot status and history",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            },
            "description": "Parking slot ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of recent status logs to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slot status retrieved successfully"
          },
          "404": {
            "description": "Parking slot not found"
          }
        }
      }
    },
    "/api/parking-slots/quick-assign": {
      "post": {
        "summary": "Quick assign node to parking slot using ChirpStack Device ID",
        "description": "Assign a node to a parking slot using the ChirpStack Device ID from QR code scanning. Critical for mobile app workflow.",
        "tags": [
          "Parking Slots"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "slotId",
                  "chirpstackDeviceId"
                ],
                "properties": {
                  "slotId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "description": "UUID of parking slot (from QR code)"
                  },
                  "chirpstackDeviceId": {
                    "type": "string",
                    "example": "0123456789ABCDEF",
                    "description": "ChirpStack Device ID (16-character hex string)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Node assigned to slot A-001"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "slot": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            },
                            "node": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "chirpstackDeviceId": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or node/slot already assigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "nodeAlreadyAssigned": {
                          "value": "Node already assigned to slot X"
                        },
                        "slotAlreadyHasNode": {
                          "value": "Slot already has node Y"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Slot or node not found"
          }
        }
      }
    },
    "/api/subscriptions/plans": {
      "get": {
        "summary": "Get all available subscription plans",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Subscription plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionPlan"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/subscriptions/plans/{id}": {
      "get": {
        "summary": "Get subscription plan by ID",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Subscription plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plan retrieved successfully"
          },
          "404": {
            "description": "Subscription plan not found"
          }
        }
      }
    },
    "/api/subscriptions": {
      "post": {
        "summary": "Create a new subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "planId",
                  "billingCycle",
                  "paymentMethod"
                ],
                "properties": {
                  "planId": {
                    "type": "integer",
                    "example": 1
                  },
                  "billingCycle": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "yearly",
                      "quarterly"
                    ],
                    "example": "monthly"
                  },
                  "paymentMethod": {
                    "type": "string",
                    "enum": [
                      "stripe",
                      "paypal",
                      "razorpay",
                      "manual",
                      "bank_transfer"
                    ],
                    "example": "stripe"
                  },
                  "autoRenew": {
                    "type": "boolean",
                    "default": true
                  },
                  "trialDays": {
                    "type": "integer",
                    "example": 7
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully"
          },
          "400": {
            "description": "Invalid input or user already has subscription"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get subscriptions for current admin",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (default 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Items per page (default 20, max 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/current": {
      "get": {
        "summary": "Get user's current active subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current subscription retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/api/subscriptions/status": {
      "get": {
        "summary": "Get user's subscription status with detailed information",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription status retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "hasActiveSubscription": {
                          "type": "boolean",
                          "example": true
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "EXPIRED",
                            "NO_SUBSCRIPTION"
                          ],
                          "example": "ACTIVE"
                        },
                        "subscription": {
                          "type": "object",
                          "properties": {
                            "planName": {
                              "type": "string",
                              "example": "Professional"
                            },
                            "daysRemaining": {
                              "type": "integer",
                              "example": 25
                            },
                            "limits": {
                              "type": "object",
                              "properties": {
                                "gateways": {
                                  "type": "integer",
                                  "example": 10
                                },
                                "parkingLots": {
                                  "type": "integer",
                                  "example": 5
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/history": {
      "get": {
        "summary": "Get user's subscription history",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription history retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/payments": {
      "get": {
        "summary": "Get user's payment history",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Payment history retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/{id}/cancel": {
      "post": {
        "summary": "Cancel a subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Subscription ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "example": "Switching to different plan"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/subscriptions/{id}/renew": {
      "post": {
        "summary": "Renew a subscription",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Subscription ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription renewed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/subscriptions/analytics": {
      "get": {
        "summary": "Get subscription analytics for user",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/limits": {
      "get": {
        "summary": "Check subscription limits for a resource",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "gateways",
                "parkingLots",
                "floors",
                "parkingSlots",
                "users"
              ]
            },
            "description": "Resource type to check"
          },
          {
            "in": "query",
            "name": "currentUsage",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Current usage count"
          }
        ],
        "responses": {
          "200": {
            "description": "Limits checked successfully"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/admin/active": {
      "get": {
        "summary": "Get all active subscriptions (Admin only)",
        "tags": [
          "Subscriptions - Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Active subscriptions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/subscriptions/admin/expiring": {
      "get": {
        "summary": "Get expiring subscriptions (Admin only)",
        "tags": [
          "Subscriptions - Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "days",
            "schema": {
              "type": "integer",
              "default": 7
            },
            "description": "Days threshold for expiring subscriptions"
          }
        ],
        "responses": {
          "200": {
            "description": "Expiring subscriptions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/subscriptions/payments/session": {
      "post": {
        "summary": "Create a Cashfree payment session for a subscription plan",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "planId",
                  "billingCycle"
                ],
                "properties": {
                  "planId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "555079c7-e50d-4424-8437-17b1f956ae23"
                  },
                  "billingCycle": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "yearly",
                      "quarterly"
                    ],
                    "example": "monthly"
                  },
                  "nodeCount": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment session created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/upgrade": {
      "post": {
        "summary": "Upgrade subscription with prorated credit",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPlanId",
                  "newBillingCycle"
                ],
                "properties": {
                  "newPlanId": {
                    "type": "string",
                    "example": "uuid-or-plan-name"
                  },
                  "newBillingCycle": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "quarterly",
                      "yearly"
                    ]
                  },
                  "nodeCount": {
                    "type": "integer",
                    "example": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upgrade initiated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/subscriptions/payments/process": {
      "post": {
        "summary": "Process payment (Internal use)",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "paymentId",
                  "gatewayTransactionId",
                  "success"
                ],
                "properties": {
                  "paymentId": {
                    "type": "integer",
                    "example": 1
                  },
                  "gatewayTransactionId": {
                    "type": "string",
                    "example": "stripe_pi_1234567890"
                  },
                  "success": {
                    "type": "boolean",
                    "example": true
                  },
                  "failureReason": {
                    "type": "string",
                    "example": "Card declined"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/subscriptions/payments/{paymentId}/refund": {
      "post": {
        "summary": "Process payment refund",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Payment ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refundAmount": {
                    "type": "number",
                    "example": 29.99
                  },
                  "reason": {
                    "type": "string",
                    "example": "Customer request"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund processed successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      }
    },
    "/api/subscriptions/webhooks/payment": {
      "post": {
        "summary": "Handle payment gateway webhooks",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "gatewayTransactionId",
                  "status"
                ],
                "properties": {
                  "gatewayTransactionId": {
                    "type": "string",
                    "example": "stripe_pi_1234567890"
                  },
                  "status": {
                    "type": "string",
                    "example": "completed"
                  },
                  "metadata": {
                    "type": "object",
                    "example": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook data"
          }
        }
      }
    },
    "/api/subscriptions/payments/{transactionId}": {
      "get": {
        "summary": "Get payment details by transaction ID",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment details retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      }
    },
    "/api/subscription-plans": {
      "get": {
        "summary": "Get all subscription plans",
        "description": "Retrieve all subscription plans. Non-authenticated users see only active plans, admins see all based on filters.",
        "tags": [
          "Subscription Plans"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "isActive",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by active status (admin only)"
          },
          {
            "in": "query",
            "name": "isPopular",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by popular plans"
          },
          {
            "in": "query",
            "name": "isCustom",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by custom plans"
          },
          {
            "in": "query",
            "name": "billingCycle",
            "schema": {
              "type": "string",
              "enum": [
                "monthly",
                "yearly",
                "quarterly"
              ]
            },
            "description": "Filter by billing cycle"
          },
          {
            "in": "query",
            "name": "minPrice",
            "schema": {
              "type": "number"
            },
            "description": "Minimum price filter"
          },
          {
            "in": "query",
            "name": "maxPrice",
            "schema": {
              "type": "number"
            },
            "description": "Maximum price filter"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "basePricePerMonth",
                "basePricePerYear",
                "sortOrder",
                "createdAt",
                "updatedAt"
              ],
              "default": "sortOrder"
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of plans to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of plans to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription plans retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionPlan"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "count": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "offset": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          }
        }
      },
      "post": {
        "summary": "Create new subscription plan",
        "description": "Create a new subscription plan (Super Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionPlan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "UUID of the created subscription plan"
                        },
                        "name": {
                          "type": "string"
                        },
                        "pricing": {
                          "type": "object"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "409": {
            "description": "Plan name already exists"
          }
        }
      }
    },
    "/api/subscription-plans/{id}": {
      "get": {
        "summary": "Get subscription plan by ID",
        "description": "Retrieve detailed information about a specific subscription plan",
        "tags": [
          "Subscription Plans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Subscription plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionPlan"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subscription plan not found"
          }
        }
      },
      "put": {
        "summary": "Update subscription plan",
        "description": "Update an existing subscription plan (Super Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Subscription plan ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 100
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000
                  },
                  "basePricePerMonth": {
                    "type": "number",
                    "minimum": 0
                  },
                  "basePricePerYear": {
                    "type": "number",
                    "minimum": 0
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "isPopular": {
                    "type": "boolean"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plan updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Subscription plan not found"
          },
          "409": {
            "description": "Plan name already exists"
          }
        }
      },
      "delete": {
        "summary": "Delete subscription plan",
        "description": "Soft delete a subscription plan (Super Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Subscription plan ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 500,
                    "description": "Reason for deletion"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plan deleted successfully"
          },
          "400": {
            "description": "Cannot delete plan with active subscriptions"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Subscription plan not found"
          }
        }
      }
    },
    "/api/subscription-plans/{id}/restore": {
      "post": {
        "summary": "Restore deleted subscription plan",
        "description": "Restore a soft-deleted subscription plan (Super Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Subscription plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription plan restored successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Deleted subscription plan not found"
          }
        }
      }
    },
    "/api/subscription-plans/bulk/update": {
      "post": {
        "summary": "Bulk update subscription plans",
        "description": "Update multiple subscription plans at once (Super Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "planIds",
                  "updates"
                ],
                "properties": {
                  "planIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "minItems": 1,
                    "maxItems": 50,
                    "example": [
                      "plan-id-1",
                      "plan-id-2"
                    ]
                  },
                  "updates": {
                    "type": "object",
                    "properties": {
                      "isActive": {
                        "type": "boolean"
                      },
                      "sortOrder": {
                        "type": "integer"
                      },
                      "usdToInrRate": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plans updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/subscription-plans/exchange-rate": {
      "put": {
        "summary": "Update USD to INR exchange rate",
        "description": "Update the exchange rate for all subscription plans (Super Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "usdToInrRate"
                ],
                "properties": {
                  "usdToInrRate": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 200,
                    "example": 75.5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exchange rate updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/api/subscription-plans/statistics": {
      "get": {
        "summary": "Get subscription plan statistics",
        "description": "Get comprehensive statistics about subscription plans (Admin only)",
        "tags": [
          "Subscription Plans"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "overview": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "active": {
                              "type": "integer"
                            },
                            "popular": {
                              "type": "integer"
                            },
                            "custom": {
                              "type": "integer"
                            },
                            "deleted": {
                              "type": "integer"
                            }
                          }
                        },
                        "pricing": {
                          "type": "object",
                          "properties": {
                            "minMonthlyPrice": {
                              "type": "number"
                            },
                            "maxMonthlyPrice": {
                              "type": "number"
                            },
                            "avgMonthlyPrice": {
                              "type": "number"
                            }
                          }
                        },
                        "healthScore": {
                          "type": "integer",
                          "description": "Percentage of active vs total plans"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    }
  },
  "tags": []
}
